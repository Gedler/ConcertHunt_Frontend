


fanCard
<div>
<h1>Fan Tag: {user}</h1>
            <h2>Location: {location}</h2>
        </div>
        


Concertcard
        <div>
            <h1>Venue: {venue} </h1>
            <h2>Location: {location} </h2>
            <h3>Price: {price} </h3>
            <p>There are {people_attending} going to this event!</p>
            <button onClick= {handleAttendConcert({id})}>Add To Concert List</button>
        </div>
    )
}


ArtistCard 
 <div>
            <h1>Artist: {name}</h1>
            <h2>Location: {location} </h2>
         
        </div>


        // getUserConcerts = () => {
//   const getUserFromAllUsers = this.state.all_fans.find(fan => {
//                 fan.user === this.state.currentFan
//                 console.log(getUserFromAllUsers)
//     })

//     const getUserAttendingConcerts = this.state.attending_concerts.filter(attending => 
//             attending.fan_id === getUserFromAllUsers.id)
//             console.log(getUserAttendingConcerts)
    

//     const getUserConcertts = this.state.concerts.filter(concert => 
//           concert.attending_concerts.id === getUserAttendingConcerts)
//           console.log(getUserConcerts)
    
//     this.setState({
//       current_user_concerts: getUserConcertts
//     })
  //}

   // if Userproducts.length > 0 {
     // let iterator = userproducts.values 
     // for (let letter of iterator )
     //  const userProducts = this.state.attending_concerts.filter(concerts => concerts.fan_id === 
   }
  //var iterator = arr.values();
  //for (let letter of iterator))
  //console.log(userProducts)
  //attending concerts has concert id 
  //return concerts that has the same id as the attending concert actual concert id 

   //const blah = getConcertIDs.map( ids => {ids})
   //console.log(blah)


   //this.setState({
    // grabIds: getConcertIDs //this has the id of all concerts 
   //})




  // const getConcerts = this.state.concerts.filter((concert) => concert.concert_id === currentFans.id)
   //console.log(getConcerts)


{
            "id": 14,
            "fan_id": 1,
            "concert_id": 7
        }




Fan Page 

- all concerts they're going to 
- all artists they're following 



    // const fanThatLoggedIn = this.state.all_artists.find((artist) => artist. === this.state.fanName)
    // const userProducts = this.state.followers.filter((follower) => follower.artist_id === fanThatLoggedIn.id)
    // const getConcertIDs = userProducts.map(concert => concert.concert_id) //this has the id of all concerts
    
follower1: getFollowerID[0], 
      follower2: getFollowerID[1],
      follower3: getFollowerID[2],
      follower4: getFollowerID[3],
      follower4: getFollowerID[4]



      {id: 11, artist_id: 1, fan_id: 1}
artist_id: 1


<p>Want to add this concert to your list? Simply type the concert ID on the form at the bottom of this page :)</p>


<form onSubmit= {e=> handleAttendConcert(e)}>
            <label>Add Concert to your List</label>
            <input type="text" placeholder = "Enter the ID of Concert" onChange={e=> getUserInput(e)}/>
            <input type="submit"Attend This Concert/>
            
        </form>



        login   

        <div>
        <h1>{this.props.header}</h1>
       
        <form onSubmit={(e)=> this.handleLogin(e)}>
            <label>Username</label>
            <input name="username" type="text"/>
            <label>Password</label>
            <input name="password" type="text"/>
            <input type="submit"/>
        </form> 
        <button onClick = {(e)=> this.setState({isClicked:true})}>New User?</button>
        {this.state.isClicked ?  
        <form onSubmit={(e)=> this.handleRegister(e)}>
            <h1>Register</h1>
            <label>Username</label>
            <input name="username" type="text"/>
            <label>Password</label>
            <input name="password" type="text"/>
            <label>Location</label>
            <input name="location" type="text"/>
            <input onClicked = {(e)=> this.setState({isClicked:false})}type="submit"/> 
        </form> : null}
        {this.state.isRegistered ? <h3>Welcome To Concert Hunt, please login :)</h3> : null}
        <Link to= "/profile" ><button>Enter Concert Hunt</button></Link>
        </div>

        
    


)

}
}





import { Card, Icon, Image } from 'semantic-ui-react'
import { Button, Modal } from 'semantic-ui-react'
import ConcertCard from "../concertpages/ConcertCard";
import {useState} from "react";

function ArtistCard({each_artist, getArtistObj, artistFollowers, artistFollowerCount,  selectArtistCard, loggedFan_id, artistConcerts, concert}){

const {id, name, location, image, concerts} = each_artist


const [open, setOpen] = useState(false)
const [isClicked, setIsClicked] = useState(false)

function handleFollow(e) {

  setIsClicked(!isClicked)

    fetch("http://localhost:3001/follower/new", {
      method: "POST",
      headers: {"Content-Type": "application/json"},
      body: JSON.stringify({
              artist_id: selectArtistCard, 
              fan_id: loggedFan_id
      })

    })

    .then(res => res.json())
    .then(info => {
      console.log(info)
      console.log("You're now following this artist!")
    })
}



return (


<div onMouseOver = {() => getArtistObj(each_artist)}>
  <Card className = "card" >
    <div className="profile-pic">
    <Image src= {image} wrapped ui={false} />
    </div>
    <Card.Content>
      <Card.Header>{name}</Card.Header>
      <Card.Meta>Joined in 2016</Card.Meta>
      <Card.Description>
       Hometown: {location}
      </Card.Description>
    </Card.Content>
    <Card.Content extra>
      <a>
        <Icon name='user' />
        
        </a>
      <button onClick = {(e)=> handleFollow(e)}>Follow</button>
      {isClicked ? <p>You're now following this artist!</p>: null   }

        
    </Card.Content>
  </Card>
  <Modal
      open={open}
      onClose={() => setOpen(false)}
      onOpen={() => setOpen(true)}
      trigger={<Button>View Profile</Button>}
    >
      <Modal.Header>{name} | Followers: {artistFollowerCount}</Modal.Header>
      <Modal.Content image scrolling>
        <Image size='medium' src= {image} wrapped />

        <Modal.Description>
          
          <h1>Available Concerts:</h1>
          <p>
           {concert}
          </p>
        </Modal.Description>
      </Modal.Content>
      <Modal.Actions>
        <Button onClick={() => setOpen(false)} primary>
          Proceed <Icon name='chevron right' />
        </Button>
      </Modal.Actions>
    </Modal>
  </div>
)


    
}

export default ArtistCard;




header component css 
.navbar {
    font-size: 35px;
    margin-left: 80px;

}

artistpage css
.navbar {
    font-size: 35px;
    margin-left: 80px;
    border:solid;
    border-color: gold;
}

main css
.header {
    font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
    font-size:medium;
    padding:20px;
    font-weight: bolder;
    color: blueviolet;
    
}
